@* Generator: Template TypeVisibility: Internal GeneratePrettyNames: True *@
@using System
@using System.Collections.Generic
@using System.Linq
@using Hangfire
@using Hangfire.Atoms
@using Hangfire.Atoms.Dashboard
@using Hangfire.Common
@using Hangfire.Dashboard
@using Hangfire.Dashboard.Pages
@using Hangfire.Dashboard.Resources
@using Hangfire.States
@inherits Hangfire.Dashboard.RazorPage
@{
    var monitor = Storage.GetMonitoringApi();
    var job = monitor.JobDetails(JobId);
    var title = job?.Job != null ? Html.JobName(job.Job) : Strings.Common_Job;

    Layout = new LayoutPage(title);

    HashSet<string> subatomIds;
    using (var connection = Storage.GetJobStorageConnection())
    {
        subatomIds = connection.GetAllItemsFromSet(Atom.GenerateSubAtomKeys(JobId));
    }

    var subatomStates = subatomIds
        .Select(x =>
        {
            var subatomState = monitor.JobDetails(x);
            var lastState = subatomState.History.First();
            return (id: x, job: subatomState.Job, lastState: lastState);
        })
        .GroupBy(x => x.lastState.StateName)
        .OrderBy(x => x.Key)
        .ToDictionary(x => x.Key, x => x.ToList());

    var subatomsCount = subatomIds.Count;
    var subatomsFinished = subatomStates.GetByKey(SucceededState.StateName)?.Count ?? 0;
    var subatomsFinishedPercentage = Math.Round(subatomsFinished * 100.0M / subatomsCount, MidpointRounding.ToEven);
    var subatomsFailed = subatomStates.GetByKey(FailedState.StateName)?.Count ?? 0;
    var subatomsFailedPercentage = Math.Floor(subatomsFailed * 100.0M / subatomsCount);

    string GetStateId(string stateName) => stateName.ToLowerInvariant().Replace(" ", "");
}

<div class="row">
    <div class="col-md-3">
        @Html.JobsSidebar()
    </div>
    <div class="col-md-9">
        <h1 class="page-header">@title</h1>

        @if (job == null)
        {
            <div class="alert alert-warning">
                @String.Format(Strings.JobDetailsPage_JobExpired, JobId)
            </div>
        }
        else
        {
            if (job.ExpireAt.HasValue)
            {
                <div class="alert alert-info">
                    @Html.Raw(String.Format(Strings.JobDetailsPage_JobFinished_Warning_Html, JobHelper.ToTimestamp(job.ExpireAt.Value), job.ExpireAt))
                </div>
            }

            <div class="job-snippet">
                <div class="job-snippet-code">
                    <dl class="dl-horizontal">
                        <dt>@Strings.Common_Id</dt>
                        <dd>@Url.JobIdLink(JobId)</dd>
                        <dt>@Strings.Common_Created</dt>
                        <dd>@Html.LocalTime(job.CreatedAt ?? DateTime.UtcNow)</dd>
                        <dt>@Strings.NavigationMenu_Jobs</dt>
                        <dd>@subatomsCount</dd>
                        <dt>Progress</dt>
                        <dd>
                            <div class="progress">
                                @{
                                    if (subatomsFinishedPercentage != 100)
                                    {
                                        <div class="progress-bar progress-bar-warning progress-bar-striped active" role="progressbar" style="width: @subatomsFinishedPercentage%;">
                                            @subatomsFinishedPercentage%
                                        </div>
                                        <div class="progress-bar progress-bar-danger progress-bar-striped active" role="progressbar" style="width: @subatomsFailedPercentage%;">
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" style="width: 100%;">
                                        </div>
                                    }
                                }
                            </div>
                        </dd>
                    </dl>

                </div>
            </div>

            var index = 0;
            <ul class="nav nav-tabs nav-justified" role="tablist">
                @foreach (var subatomState in subatomStates)
                {
                    var stateBackgroundColor = JobHistoryRenderer.GetForegroundStateColor(subatomState.Key);
                    var stateId = GetStateId(subatomState.Key);
                    var jobsCount = subatomStates[subatomState.Key].Count;
                    <li role="presentation" class="@(index == 0 ? "active" : "")">
                        <a href="#@stateId" aria-controls="@stateId" role="tab" data-toggle="tab">
                            @subatomState.Key <span class="badge" style="background-color: @stateBackgroundColor">@jobsCount</span>
                        </a>
                    </li>
                    index++;
                }
            </ul>

            index = 0;
            <div class="tab-content">
                @foreach (var states in subatomStates)
                {
                    var stateId = GetStateId(states.Key);
                    <div role="tabpanel" class="tab-pane @(index == 0 ? "active" : "")" id="@stateId">
                        <div class="panel panel-default" style="border-top: none;">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th class="min-width word-break">@Strings.Common_Id</th>
                                                <th>@Strings.Common_Job</th>
                                                <th class="min-width word-break">@Strings.Common_Created</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var subAtomState in states.Value)
                                            {
                                                <tr>
                                                    <td class="min-width word-break">@Html.JobIdLink(subAtomState.id)</td>
                                                    <td>@Html.JobNameLink(subAtomState.id, subAtomState.job)</td>
                                                    <td class="min-width word-break">@Html.RelativeTime(subAtomState.lastState.CreatedAt)</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    index++;
                }
            </div>
        }
    </div>
</div>
